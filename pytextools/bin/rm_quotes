#!/usr/bin/env python

# HACK TO PREVENT META TERM DATA FROM PRINTING TO STDOUT
import os
import atexit
user_term = os.environ['TERM'] 
os.environ['TERM'] = 'linux'
def resetPath():
	os.environ['TERM'] = user_term
atexit.register(resetPath)
# HACK TO PREVENT META TERM DATA FROM PRINTING TO STDOUT

import argparse
import sys
import signal
import re
import csv

signal.signal( signal.SIGPIPE, signal.SIG_DFL )

def intList(s):
	try:
		fields = map(lambda x: (int(x)-1), s.split(','))
		return fields
	except:
		raise argparse.ArgumentTypeError("Must be a list of integers")

def sublist( list, indices=[] ):
	if len(indices):
		sublist = []
		for n in indices:
			if n < len(list):
				sublist.append( list[n] )
		return sublist
	else:
		return list

def parseArgs():
	parser = argparse.ArgumentParser(description='Remove quotes from delimited files', 
		formatter_class=argparse.RawTextHelpFormatter)

	fields = parser.add_argument_group('fields')
	fields.add_argument('-t', '--field-delimiter', metavar='DELIMITER', dest='sep', action='store', default='|',
				help='field delimiter (default = |)')
	fields.add_argument('-q', '--quote-char', metavar='CHAR', dest='quote', action='store', default='"',
				 help='quote char (default = ")')

	formats = parser.add_argument_group('find and replace')
	formats.add_argument('-f', '--find', metavar='REGEX', dest='target', action='store',default='',
				help='This is the regular expression to match\n'
				'inside the quoted fields (default = empty string)')
	formats.add_argument('-r', '--replacement', metavar='STRING', dest='repl', action='store',default='',
				help='This is the string to replace each occurrence\n'
				'of the target with (default = empty string)')

	parser.add_argument('file', metavar='FILE', nargs='?', default='/dev/stdin',
				help='the file to replace quotes in (default = stdin)' )
	a = parser.parse_args()

	a.sub = (lambda s: re.sub(a.target, a.repl, s)) if a.target else (lambda s: s)

	return a

def removeQuotes(args):
	with open(args.file, 'rb') as f:
		reader = csv.reader(f, delimiter=args.sep, quotechar=args.quote)
		for row in reader:
			newrow = [args.sub(r) for r in row]
			print args.sep.join(newrow)

if __name__ == "__main__":
	args = parseArgs()
	removeQuotes(args)


